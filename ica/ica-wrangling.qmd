---
title: "ica-wrangling"
format: html
---

```{r}
# Load tidyverse & data
library(tidyverse)
elections <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")
```

```{r}
# Get a background map
library(socviz)
data(county_map)

# Make a choropleth map
library(RColorBrewer)  # For the color scale
library(ggthemes) # For theme_map
elections |> 
  mutate(county_fips = as.character(county_fips)) |> 
  mutate(county_fips = 
           ifelse(nchar(county_fips) == 4, paste0("0", county_fips), county_fips)) |> 
  ggplot(aes(map_id = county_fips, fill = cut(repub_pct_20, breaks = seq(0, 100, by = 10)))) +
    geom_map(map = county_map) +
    scale_fill_manual(values = rev(brewer.pal(10, "RdBu")), name = "% Republican") +
    expand_limits(x = county_map$long, y = county_map$lat)  + 
    theme_map() +
    theme(legend.position = "right") + 
    coord_equal()
```

```{r}
# Same thing with the following codes
select(elections, c(state_name, county_name, dem_pct_20, dem_pct_16))
```

```{r}
# Pipe function: 
  # “passes” objects, usually datasets, to a function:
   # object |> function() is the same as function(object)

elections |> 
  select(state_name, county_name, dem_pct_20, dem_pct_16)
```

```{r}
# With a pipe
elections |> 
  filter(state_name == "Minnesota")
```

```{r}
# With pipes: each verb in a new row
elections |> 
  select(state_name, county_name, dem_pct_20, dem_pct_16) |> 
  filter(state_name == "Minnesota")
```

```{r}
# Store the results
mn <- elections |> 
  select(state_name, county_name, dem_pct_20, dem_pct_16) |> 
  filter(state_name == "Minnesota")

# Always check it out to confirm it's what you want it to be!
head(mn)
```

**select Practice*

```{r}
# Define elections_small
elections_small <- elections |>
  select(state_name,county_name,total_votes_20,repub_pct_20,dem_pct_20,total_votes_16,dem_pct_16)

# Check out the first 6 rows to confirm your code did what you think it did!
head(elections_small)
```

**filter Practice**

```{r}
# Keep only data on counties in Hawaii
elections_small |>
  filter(state_name == "Hawaii")
```


```{r}
# combine data from Hawaii & Delaware
elections_small |> 
 filter(state_name %in% c("Hawaii", "Delaware"))
```

```{r}
# Keep only data on counties where the Republican got MORE THAN 93.97% of the vote in 2020
# THINK: What variable is relevant here?
elections_small |>
  filter(repub_pct_20 > 93.97)
```

```{r}
# Keep only data on counties where the Republican got AT LEAST 93.97% of the vote in 2020
# This should have 1 more row (observation) than your answer above
elections_small |>
  filter(repub_pct_20 >= 93.97)
```

```{r}
# Keep only data on counties in Texas where the Democrat got more than 65% of the vote in 2020
# Do this 2 ways.
# Method 1: 2 filters with 1 condition each
elections_small |> 
  filter(state_name == "Texas") |> 
  filter(repub_pct_20 > 65)

# Method 2: 1 filter with 2 conditions
elections_small |> 
  filter(state_name == "Texas", repub_pct_20 > 65)
```

**arrange Practice**
```{r}
# Arrange the counties in elections_small from lowest to highest percentage of 2020 Republican support
# Print out just the first 6 rows
elections_small |> 
   arrange(desc(repub_pct_20)) |> 
   head()
```

```{r}
# Arrange the counties in elections_small from highest to lowest percentage of 2020 Republican support
# Print out just the first 6 rows
elections_small |> 
   arrange(repub_pct_20) |> 
   head()
```

**mutate Practice**
```{r}
# create a new var (diff_20)
elections_small |> 
  mutate(diff_20 = repub_pct_20 - dem_pct_20) |> 
  head()
```

```{r}
# create a new var (repub_votes_20)
elections_small |> 
   mutate(repub_votes_20 = round(total_votes_20 * repub_pct_20/100)) |> 
   head()
```

```{r}
# create a new var (repub_votes_20)
elections_small |> 
  mutate(repub_win_20 = repub_pct_20 > dem_pct_20) |> 
  head()
```

```{r}
# You try
# Define a variable that calculates the change in Dem support in 2020 vs 2016
elections_small |> 
  mutate(dem_diff = dem_pct_20 - dem_pct_16) |> 
  head()
```

```{r}
# You try
# Define a variable that determines whether the Dem support was higher in 2020 than in 2016 (TRUE/FALSE)
elections_small |> 
  mutate(dem_win_20 = dem_pct_20 > dem_pct_16) |> 
  head()
```

**pipe series Practice**
```{r}
elections_small |> 
  filter(state_name == "Wisconsin",
          repub_pct_20 < dem_pct_20) |> 
  arrange(desc(total_votes_20)) |> 
  head()
```

```{r}
elections_small |> 
   filter(state_name == "Delaware") |> 
   mutate(repub_win_20 = repub_pct_20 > dem_pct_20) |> 
   select(county_name, repub_pct_20, dem_pct_20, repub_win_20)
```

```{r}
# Define the dataset
# Only store the results once you're confident that they're correct

mn_wi <- elections_small |>
  select(state_name,county_name,dem_pct_20,dem_pct_16)|>
  filter(state_name %in% c("Minnesota", "Wisconsin")) |>
  mutate(dem_win_20 = dem_pct_20 > dem_pct_16)|>
  arrange(desc(dem_win_20)) 

# Check out the first 6 rows to confirm your results
head(mn_wi)
```

**summarize Practice**
```{r}
# calculate the median of var
elections_small |> 
  summarize(median(repub_pct_20))
```

```{r}
# calculate the median of var
elections_small |> 
  summarize(median_repub = median(repub_pct_20))
```

```{r}
# calculating the media of var & total votes of var
elections_small |> 
  summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))
```

**summarize + group_by Practice**
```{r}
elections_small |> 
   group_by(state_name)
```

```{r}
# Check out the structure before and after group_by
elections_small |> 
  class()
# 
elections_small |> 
  group_by(state_name) |> 
  class()
```

```{r}
# What does this do?
# (What if we didn't use group_by?)
elections_small |> 
  group_by(state_name) |> 
  summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20)) 
```





